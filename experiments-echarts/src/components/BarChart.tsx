"use client";

import * as echarts from "echarts";
import { useEffect, useRef } from "react";

import type {
  // The component option types are defined with the ComponentOption suffix
  TitleComponentOption,
  TooltipComponentOption,
  GridComponentOption,
  DatasetComponentOption,
} from "echarts/components";
import type { EChartsOption } from "echarts";

const myOption: EChartsOption = {
  tooltip: {
    position: "top",
  },
  grid: {
    height: "50%",
    top: "10%",
  },
  dataset: [
    {
      source: [
        ["Day", "Hour", "Value"],
        ["Mon", 1, 30],
        ["Mon", 2, 40],
        ["Tue", 1, 60],
        ["Tue", 2, 80],
        ["Wed", 1, 20],
        ["Wed", 2, 90],
      ],
    },
  ],
  series: [
    {
      type: "heatmap",
      encode: {
        x: "Hour",
        y: "Daasdy",
        value: "Value",
        tooltip: ["Day", "Hour", "Value"],
      },
    },
  ],
};

// ___________________________________________________________________________
// Dataset Types

type ValueType = string | number;

type Column<N = ValueType> = {
  name: string;
  valueType: N;
};

type Columns = readonly Column<ValueType>[];

type Source<Cols extends Columns> = [
  header: { [K in keyof Cols]: Cols[K]["name"] },
  ...rows: { [K in keyof Cols]: Cols[K]["valueType"] }[]
];

type Dataset<Src extends Source<Columns>> = {
  id: string;
  source: Src;
};

// ___________________________________________________________________________
// Series Types

// --- Series types ---
enum SeriesType {
  Bar = "bar",
  Line = "line",
  Scatter = "scatter",
}

type Encode<Dts extends Dataset<Source<Columns>>> = {
  x: Dts["source"][0][number];
  y: Dts["source"][0][number];
  type: SeriesType;
};

// ___________________________________________________________________________
// Example Dataset

// This gets generated by the tool to enforce type safety
type MyColumns = [
  { name: "Day"; valueType: string },
  { name: "Hour"; valueType: number },
  { name: "Value"; valueType: number }
];

type MyDataset = Dataset<Source<MyColumns>>;

const encode: Encode<MyDataset> = {
  x: "Dayasd",
  y: "Hour",
  type: SeriesType.Bar,
};

// We then have a function that fetches the dataset from the server
// It's unclear how we should structure the endpoint, but a good idea might
// be to serve all the data in a single base route like /data. IDK. It'd be
// nice to be able to serve it under an existing API.
const dataset: MyDataset = {
  id: "dataset",
  source: [
    ["Day", "Hour", "Value"],
    ["Mon", 1, 30],
    ["Mon", 2, 40],
    ["Tue", 1, 60],
    ["Tue", 2, 80],
    ["Wed", 1, 20],
    ["Wed", 2, 90],
  ],
};

const option = {
  tooltip: {
    position: "top",
  },
  grid: {
    height: "50%",
    top: "10%",
  },
  xAxis: {
    type: "category",
  },
  yAxis: {
    type: "category",
  },
  visualMap: {
    min: 0,
    max: 100,
    calculable: true,
    orient: "horizontal",
    left: "center",
    bottom: "5%",
  },
  dataset: [dataset],
  series: [
    {
      type: "heatmap",
      encode: {
        x: "Hour",
        y: "Day",
        value: "Value",
        tooltip: ["Day", "Hour", "Value"],
      },
    },
  ],
};

export default function BarChart() {
  const chartRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (chartRef.current) {
      const myChart = echarts.init(chartRef.current);
      myChart.setOption(option);
    }
  }, []);

  return <div ref={chartRef} className="w-full h-[500px] mt-[500px]" />;
}
